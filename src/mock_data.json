[
    {
        "title": "Différence entre let et const en JavaScript",
        "ask": "Quelle est la différence entre `let` et `const` en JavaScript ?",
        "response": "`let` permet de déclarer des variables dont la valeur peut être modifiée, tandis que `const` permet de déclarer des variables dont la valeur ne peut pas être réassignée après avoir été définie.",
        "position": 1,
        "id": "3",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "Création d'une fonction en JavaScript",
        "ask": "Comment créer une fonction en JavaScript ?",
        "response": "Vous pouvez créer une fonction en utilisant la syntaxe suivante : function maFonction(parametre1, parametre2) {  // Code de la fonction return resultat;}",
        "position": 1,
        "id": "4",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "Portée en JavaScript",
        "ask": "Qu'est-ce que la portée (scope) en JavaScript ?",
        "response": "La portée (scope) en JavaScript détermine la visibilité des variables. Les variables déclarées dans une fonction sont généralement locales à cette fonction, tandis que les variables déclarées en dehors des fonctions sont généralement globales.",
        "position": 1,
        "id": "5",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "React",
        "ask": "Qu'est-ce que React ?",
        "response": "React est une bibliothèque JavaScript open-source utilisée pour créer des interfaces utilisateur (UI) interactives. Elle permet de construire des applications web modernes et réactives en utilisant des composants réutilisables.",
        "position": 1,
        "id": "7",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "Composant React ?",
        "ask": "Comment créer un composant React ?",
        "response": "Vous pouvez créer un composant React en utilisant une classe `React.Component` ou une fonction (composant fonctionnel). Les composants fonctionnels sont couramment utilisés. ",
        "position": 1,
        "id": "8",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "JSX en React",
        "ask": "Qu'est-ce que le JSX en React ?",
        "response": "Le JSX (JavaScript XML) est une extension de syntaxe utilisée dans React pour décrire l'apparence des composants. Il ressemble à du HTML, mais il est transformé en JavaScript lors de la compilation. Cela permet de créer des éléments React de manière plus déclarative.",
        "position": 1,
        "id": "9",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "Composants de classe et les composants fonctionnels ?",
        "ask": "Quelle est la différence entre les composants de classe et les composants fonctionnels en React ?",
        "response": "Les composants de classe sont créés en étendant la classe `React.Component` et ont un état (state). Les composants fonctionnels sont des fonctions JavaScript qui prennent des props en entrée et n'ont pas d'état interne. Les composants fonctionnels sont plus couramment utilisés depuis l'introduction des hooks dans React.",
        "position": 1,
        "id": "10",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "Evénements en React ?",
        "ask": "Comment gérer les événements en React ?",
        "response": "En React, vous pouvez gérer les événements en passant des gestionnaires d'événements (fonctions) en tant que props aux éléments du JSX. Par exemple, pour gérer un clic sur un bouton : <button onClick={handleClick}>Cliquez ici</button>",
        "position": 1,
        "id": "11",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "React Router",
        "ask": "Qu'est-ce que React Router ?",
        "response": "React Router est une bibliothèque populaire pour la gestion de la navigation dans les applications React. Elle permet de créer des routes et des vues distinctes pour différentes URL, ce qui est essentiel pour les applications à plusieurs pages.",
        "position": 1,
        "id": "12",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "Données entre les composants en React",
        "ask": "Comment passer des données entre les composants en React ?",
        "response": "Vous pouvez passer des données entre les composants en utilisant les `props`. Les données sont passées d'un composant parent à un composant enfant en tant que propriétés, ce qui permet de créer une communication entre les composants.",
        "position": 1,
        "id": "13",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "Hook en React ?",
        "ask": "Qu'est-ce qu'un hook en React ?",
        "response": "Un hook est une fonction spéciale qui vous permet d'ajouter des fonctionnalités à un composant fonctionnel. Les hooks, tels que `useState` et `useEffect`, vous permettent d'utiliser l'état et les effets dans les composants fonctionnels.",
        "position": 1,
        "id": "14",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "Requête HTTP en React ?",
        "ask": "Comment effectuer une requête HTTP en React ?",
        "response": "Vous pouvez effectuer des requêtes HTTP en React en utilisant des bibliothèques comme Axios ou en utilisant les fonctionnalités intégrées de JavaScript telles que `fetch`. Vous pouvez effectuer des appels réseau pour récupérer des données depuis un serveur.",
        "position": 1,
        "id": "15",
        "lastView": "2023-11-01T00:00:00.000Z"
    },
    {
        "title": "Le context en React",
        "ask": "Qu'est-ce que le context en React ?",
        "response": "Le context est une fonctionnalité de React qui permet de partager des données entre les composants sans avoir à passer explicitement des props de haut en bas de l'arbre des composants. Il est souvent utilisé pour gérer des données globales ou des configurations partagées au sein de l'application.",
        "position": 1,
        "id": "16",
        "lastView": "2023-11-01T00:00:00.000Z"
    }
]